KEY MARKING CRITERIA: 
// input vector format: [1.0 0.0 0.0] [0.0 1.0 0.0] [0.0 0.0 1.0] 
// always the same number of vectors as dimensions 
// program should parse arguments, infer dimension and solve 
// create a text file 'result.txt' with one number in it  

tasks: 
fix reduce so that it is correct for orthogonal bases 
fix reduce and listsieve so that no vector appears twice 
try to generalise the above 

write LLL 
test. 

void gramSchmidt(double **V, double **U, int dim) {
    for (int i = 0; i < dim; i++) {
        for (int k = 0; k < dim; k++) {
            U[i][k] = V[i][k];
        }
        for (int j = 0; j < i; j++) {
            double dotProduct = 0.0;
            for (int k = 0; k < dim; k++) {
                dotProduct += U[j][k] * V[i][k];
            }
            for (int k = 0; k < dim; k++) {
                U[i][k] -= (dotProduct / (U[j][k] * U[j][k])) * U[j][k];
            }
        }
        double norm = 0.0;
        for (int k = 0; k < dim; k++) {
            norm += U[i][k] * U[i][k];
        }
        norm = sqrt(norm);
        for (int k = 0; k < dim; k++) {
            U[i][k] /= norm;
        }
    }
}
